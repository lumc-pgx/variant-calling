# imports
import os
import glob
import yaml
import datetime

# yaml representer for dumping config
from yaml.representer import Representer
import collections

class VariantCalling(object):
    def __init__(self, config, workflow_name):
        self.config = config
        self.workflow_name = workflow_name

        with open(config["BARCODES"], "r") as bc_file:
            self.BARCODE_IDS = [line.strip()[1:] for line in bc_file if line.startswith(">")]

        with open(config["GENE"], "r") as infile:
            self.GENE = yaml.safe_load(infile)

        self.GENE_NAME = self.GENE["name"]
        self.CHROMOSOME = self.GENE["chromosome"]

        try:
            with open(config["EXPERIMENT"], "r") as infile:
                self.EXPERIMENT = yaml.safe_load(infile)
                self.START = self.EXPERIMENT["targets"][0]["primers"][0]["forward"]["start"]
                self.END = self.EXPERIMENT["targets"][0]["primers"][0]["reverse"]["end"]
        except (KeyError, IOError):
            self.START = self.GENE["coordinates"]["start"]
            self.END = self.GENE["coordinates"]["end"]

    @property
    def inputs(self):
        return self.config["GENOME"] + expand(self.config["ALLELE_FASTA_FOLDER"] + "/{barcodes}.fasta", barcodes=self.BARCODE_IDS)

    @property
    def outputs(self):
        return expand("variants/{barcodes}.{ext}", barcodes=self.BARCODE_IDS, ext=["aln", "json"])

    # handlers for workflow exit status
    def onsuccess(self):
        print("{} workflow completed successfully".format(self.workflow_name))
        yaml.add_representer(collections.OrderedDict, Representer.represent_dict)
        config_file = "config.{}.yaml".format("{:%Y-%m-%d_%H:%M:%S}".format(datetime.datetime.now()))
        with open(config_file, "w") as outfile:
            print(yaml.dump(self.config, default_flow_style=False), file=outfile)

    def onerror(self):
        print("Error encountered while executing workflow")
        shell("cat {log}")

